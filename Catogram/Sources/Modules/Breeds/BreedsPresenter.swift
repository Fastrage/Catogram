//
//  BreedsPresenter.swift
//  Catogram
//
//  Created Олег Крылов on 14/08/2019.
//  Copyright © 2019 OlegKrylov. All rights reserved.
//
//  Template generated by Edward
//

import Foundation

// MARK: View -
protocol BreedsViewProtocol: AnyObject {
    func setBreedList( breeds: [Breed])
    func set(images: [ImageResponse])
    func showAlert(for alert: String)
}

// MARK: Presenter -
protocol BreedsPresenterProtocol: AnyObject {
    var view: BreedsViewProtocol? { get set }
    func viewDidLoad()
    func userSelectBreed(breed: String)
}

final class BreedsPresenter: BreedsPresenterProtocol {
    
    private var breeds: [Breed]? = nil
    private let imageNetworkProtocol = NetworkService(urlFactory: URLFactory())
    weak var view: BreedsViewProtocol?
    
    func userSelectBreed(breed: String) {
        DispatchQueue.global(qos: DispatchQoS.QoSClass.userInitiated).async{
            self.imageNetworkProtocol.searchForImage(name: breed, category: nil, completion: { result in
                switch result {
                case .success(let response):
                    if response.isEmpty {
                        self.view?.showAlert(for: "Не удалось получить фото для выбранной породы")
                    } else {
                        self.view?.set(images: response)
                    }
                case .failure(let error):
                    print(error)
                }
            })
        }
    }
    
    func viewDidLoad() {
        getBreedsList()
    }
}

private extension BreedsPresenter {
    func getBreedsList() {
        self.imageNetworkProtocol.getBreedsList { result in
            switch result {
            case .success(let response):
                self.view?.setBreedList(breeds: response)
            case .failure(let error):
                print(error)
            }
        }
    }
}
