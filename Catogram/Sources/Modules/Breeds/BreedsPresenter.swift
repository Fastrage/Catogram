//
//  BreedsPresenter.swift
//  Catogram
//
//  Created Олег Крылов on 14/08/2019.
//  Copyright © 2019 OlegKrylov. All rights reserved.
//
//  Template generated by Edward
//

import Foundation

// MARK: View -
protocol BreedsViewProtocol: class {
    var breedsList: [Breed] { get set}
    var catImages: [ImageResponse] { get set }
    func setupBreedsPhotoCollectionView()
}

// MARK: Presenter -
protocol BreedsPresenterProtocol: class {
	var view: BreedsViewProtocol? { get set }
    func viewDidLoad()
    func getPhotosForBreed(breed: String)
}

final class BreedsPresenter: BreedsPresenterProtocol {
   
    
    private var breeds: [Breed]? = nil
    private let imageNetworkProtocol = NetworkService(urlFactory: URLFactory())
    weak var view: BreedsViewProtocol?
    

    func getPhotosForBreed(breed: String) {
        DispatchQueue.global(qos: DispatchQoS.QoSClass.userInitiated).async{
        self.imageNetworkProtocol.searchForImage(name: breed, category: nil, completion: { result in
            switch result {
            case .success(let response):
                self.view?.catImages = response
                self.view?.setupBreedsPhotoCollectionView()
            case .failure(let error):
                print(error)
            }
        })
    }
    }

    func viewDidLoad() {
        getBreedsList()
    }
}

private extension BreedsPresenter {
    func getBreedsList() {
        self.imageNetworkProtocol.getBreedsList { result in
            switch result {
            case .success(let response):
                self.view?.breedsList = response
            case .failure(let error):
                print(error)
            }
        }
    }
}
