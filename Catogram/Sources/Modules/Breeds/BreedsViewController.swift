//
//  BreedsViewController.swift
//  Catogram
//
//  Created Олег Крылов on 14/08/2019.
//  Copyright © 2019 OlegKrylov. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

final class BreedsViewController: UIViewController, BreedsViewProtocol {
    
    var presenter: BreedsPresenterProtocol
    private var imageTasks = [Int: ImageTask]()
    
    private let breedsTextField = PickerViewTextField()
    private let verticalScrollView = UIScrollView()
    private let descriptionLabel = UILabel()
    private let pickerView = UIPickerView()
    private let toolBar = UIToolbar()
    private let breedsPhotosCollectionView: UICollectionView
    var breedsList: [Breed] = []
    var catImages: [ImageResponse] = []
    
    init(presenter: BreedsPresenterProtocol) {
        self.presenter = presenter
        let collectionViewLayout = UICollectionViewFlowLayout()
        collectionViewLayout.scrollDirection = .horizontal
        self.breedsPhotosCollectionView = UICollectionView(frame: .zero, collectionViewLayout: collectionViewLayout)
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.view = self
        presenter.viewDidLoad()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        setupBreedsView()
        setupCollectionView()
    }
}

extension BreedsViewController {
    
    func setupBreedsPhotoCollectionView() {
        self.setupImageTasks(totalImages: self.catImages.count)
        self.breedsPhotosCollectionView.reloadData()
    }
    
    private func setupImageTasks(totalImages: Int) {
        let session = URLSession(configuration: URLSessionConfiguration.default)
        
        for i in 0..<totalImages {
            let url = URL(string: self.catImages[i].url ?? "")!
            let imageTask = ImageTask(position: i, url: url, session: session, delegate: self)
            imageTasks[i] = imageTask
        }
    }
    
    func setupCollectionView() {
        self.breedsPhotosCollectionView.dataSource = self
        self.breedsPhotosCollectionView.delegate = self
        self.breedsPhotosCollectionView.register(BreedCollectionViewCell.self, forCellWithReuseIdentifier: "BreedCell")
        self.breedsPhotosCollectionView.contentInset = UIEdgeInsets(top: 5, left: 5, bottom: 5, right: 5)
    }
    
    
    
    func setupBreedsView() {
        self.view.addSubview(breedsTextField)
        self.view.addSubview(verticalScrollView)
        self.verticalScrollView.addSubview(breedsPhotosCollectionView)
        self.verticalScrollView.addSubview(descriptionLabel)
        
        self.pickerView.delegate = self
        self.pickerView.dataSource = self
        
        
        self.breedsTextField.inputView = pickerView
        self.breedsTextField.frame = CGRect(x: 0,
                                            y: 0,
                                            width: self.view.bounds.width,
                                            height: 40)
        self.breedsTextField.backgroundColor = .white
        self.breedsTextField.placeholder = "Выберите породу"
        self.breedsTextField.textAlignment = .center
        self.breedsTextField.isEnabled = true
        self.breedsTextField.layer.cornerRadius = 10
        self.breedsTextField.layer.borderWidth = 2
        self.breedsTextField.rightView = UIImageView(image: UIImage(named: "arrow", in: .main, compatibleWith: nil))
        self.breedsTextField.rightViewMode = UITextField.ViewMode.always
        
        self.verticalScrollView.frame = CGRect(x: 0, y: self.breedsTextField.bounds.maxY, width: self.view.bounds.width, height: (self.view.bounds.height - self.breedsTextField.bounds.height))
        self.verticalScrollView.backgroundColor = .white
        
        
        self.breedsPhotosCollectionView.frame = CGRect(x: 0,
                                                       y: self.verticalScrollView.bounds.minY,
                                                       width: self.view.bounds.width,
                                                       height: self.view.bounds.width * 1.2)
        self.breedsPhotosCollectionView.backgroundColor = .white
        
        
        self.descriptionLabel.frame = CGRect(x: 0, y: self.breedsPhotosCollectionView.bounds.maxY, width: self.view.bounds.width, height: 300)
        self.descriptionLabel.backgroundColor = .white
        self.descriptionLabel.textAlignment = .center
        self.descriptionLabel.isEnabled = false
        self.descriptionLabel.numberOfLines = 0
        self.descriptionLabel.textColor = .black
        
        self.verticalScrollView.contentSize.height = self.breedsPhotosCollectionView.bounds.height + self.descriptionLabel.bounds.height
        
        
        self.toolBar.barStyle = UIBarStyle.default
        self.toolBar.isTranslucent = true
        self.toolBar.tintColor = UIColor.mainColor()
        self.toolBar.sizeToFit()
        let doneButton = UIBarButtonItem(title: "Done", style: .plain, target: self, action: #selector (donePicker))
        let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        self.toolBar.setItems([spaceButton, doneButton], animated: false)
        self.toolBar.isUserInteractionEnabled = true
        
        breedsTextField.inputAccessoryView = toolBar
    }
    
    @objc func donePicker() {
        self.view.endEditing(true)
    }
}

extension BreedsViewController: UIPickerViewDelegate {
    
}

extension BreedsViewController: UIPickerViewDataSource {
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return breedsList.count
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return breedsList[row].name
    }
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        self.view.endEditing(true)
        self.breedsTextField.text = breedsList[row].name ?? "Порода"
        self.setupDescriptionLabel(row: row)
        presenter.getPhotosForBreed(breed: breedsList[row].id ?? "")
        self.breedsPhotosCollectionView.reloadData()
    }
    
    func setupDescriptionLabel(row: Int) {
        
        let attributedText = NSMutableAttributedString(string: "\(breedsList[row].name ?? "") \n", attributes: [NSAttributedString.Key.font: UIFont.boldSystemFont(ofSize: 30), NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        attributedText.append(NSMutableAttributedString(string: "id: \(breedsList[row].id ?? "") \n\n", attributes: [NSAttributedString.Key.font: UIFont.boldSystemFont(ofSize: 20), NSAttributedString.Key.foregroundColor: UIColor.darkGray]))
        attributedText.append(NSMutableAttributedString(string: "\(breedsList[row].description ?? "") \n\n", attributes: [NSAttributedString.Key.font: UIFont.systemFont(ofSize: 16), NSAttributedString.Key.foregroundColor: UIColor.gray]))
        attributedText.append(NSMutableAttributedString(string: "Характер: \(breedsList[row].temperament ?? "") \n\n", attributes: [NSAttributedString.Key.font: UIFont.systemFont(ofSize: 16), NSAttributedString.Key.foregroundColor: UIColor.gray]))
        attributedText.append(NSMutableAttributedString(string: "Страна произхождения: \(breedsList[row].origin ?? "") \n\n", attributes: [NSAttributedString.Key.font: UIFont.systemFont(ofSize: 16), NSAttributedString.Key.foregroundColor: UIColor.gray]))
        attributedText.append(NSMutableAttributedString(string: "Продолжительность жизни: \(breedsList[row].life_span ?? "") лет \n", attributes: [NSAttributedString.Key.font: UIFont.systemFont(ofSize: 16), NSAttributedString.Key.foregroundColor: UIColor.gray]))
        attributedText.append(NSMutableAttributedString(string: "Средний вес: \(breedsList[row].weight.metric ?? "") кг.", attributes: [NSAttributedString.Key.font: UIFont.systemFont(ofSize: 16), NSAttributedString.Key.foregroundColor: UIColor.gray]))
        
        self.descriptionLabel.attributedText = attributedText
        self.descriptionLabel.sizeToFit()
        self.verticalScrollView.contentSize.height = self.breedsPhotosCollectionView.bounds.height + self.descriptionLabel.bounds.height
    }
}

extension BreedsViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        imageTasks[indexPath.row]?.resume()
    }
    
    func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        imageTasks[indexPath.row]?.pause()
    }
}

extension BreedsViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.catImages.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "BreedCell", for: indexPath) as! BreedCollectionViewCell
        let image = imageTasks[indexPath.row]?.image
        cell.set(image: image)
        return cell
    }

}

extension BreedsViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let width = self.breedsPhotosCollectionView.bounds.width - 10
        let height = self.breedsPhotosCollectionView.bounds.height - 10
        return CGSize(width: width, height: height)
    }
}

extension BreedsViewController: ImageTaskDownloadedDelegate {
    func imageDownloaded(position: Int) {
        self.breedsPhotosCollectionView.reloadItems(at: [IndexPath(row: position, section: 0)])
    }
}
