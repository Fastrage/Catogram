//
//  FavouritesPresenter.swift
//  Catogram
//
//  Created Олег Крылов on 12/08/2019.
//  Copyright © 2019 OlegKrylov. All rights reserved.
//
//  Template generated by Edward
//

import Foundation

// MARK: View -
protocol FavouritesViewProtocol: AnyObject {
    func set(viewModels: [FavouritesViewModel])
}

// MARK: Presenter -
protocol FavouritesPresenterProtocol: AnyObject {
    var view: FavouritesViewProtocol? { get set }
    func viewDidLoad()
}

final class FavouritesPresenter: FavouritesPresenterProtocol {
    
    weak var view: FavouritesViewProtocol?
    private var favouritesImages: [FavouritesResponse] = []
    private let imageNetworkProtocol = NetworkService(urlFactory: URLFactory())
    
    func viewDidLoad() {
        getFavouritesImages()
    }
    
    
    
    
}
private extension FavouritesPresenter {
    func getFavouritesImages() {
        self.imageNetworkProtocol.getFavouritesImages { result in
            switch result {
            case .success(let response):
                self.didLoad(response)
            case .failure(let error):
                print(error)
            }
        }
    }
    func makeViewModels(_ images: [FavouritesResponse]) -> [FavouritesViewModel] {
        return images.map { image in
            FavouritesViewModel(createdAt: image.createdAt ?? "",
                                id: image.id ?? 0,
                                imageId: image.imageId ?? "",
                                subId: image.subId ?? "",
                                imageUrl: image.image.url ?? "",
                                image: nil)
        }
    }
    func didLoad(_ images: [FavouritesResponse]) {
        self.favouritesImages = images
        let viewModels: [FavouritesViewModel] = self.makeViewModels(self.favouritesImages)
        self.view?.set(viewModels: viewModels)
    }
}

