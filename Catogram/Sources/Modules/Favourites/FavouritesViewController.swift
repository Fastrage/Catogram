//
//  FavouritesViewController.swift
//  Catogram
//
//  Created Олег Крылов on 12/08/2019.
//  Copyright © 2019 OlegKrylov. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

final class FavouritesViewController: UIViewController, FavouritesViewProtocol {
    
    private var presenter: FavouritesPresenterProtocol
    private let favouritesCollectionView: UICollectionView
    private var viewModels = [FavouritesViewModel]()
    private var downloadTasks = [Int: ImageTask]()
    
    init(presenter: FavouritesPresenterProtocol) {
        self.presenter = presenter
        let collectionViewLayout = UICollectionViewFlowLayout()
        self.favouritesCollectionView = UICollectionView(frame: .zero, collectionViewLayout: collectionViewLayout)
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupCollectionView()
        presenter.view = self
        presenter.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        presenter.viewDidLoad()
        self.navigationController?.navigationBar.prefersLargeTitles = true
        self.tabBarController?.tabBar.isHidden = false
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        stopCurrentTasks()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        self.favouritesCollectionView.frame = self.view.bounds
    }
}

extension FavouritesViewController {
    func set(viewModels: [FavouritesViewModel]) {
        self.viewModels = viewModels
        self.favouritesCollectionView.reloadData()
    }
}

private extension FavouritesViewController {
    
    private func setupDownloadTask(index: Int) {
        let session = URLSession(configuration: URLSessionConfiguration.default)
        guard let url = URL(string: self.viewModels[index].imageUrl) else { return }
        if downloadTasks[index] == nil || downloadTasks[index]?.url != url {
            let imageTask = ImageTask(position: index, url: url, session: session, delegate: self)
            downloadTasks[index] = imageTask
        }
    }
    
    func setupCollectionView() {
        self.view.backgroundColor = .white
        self.favouritesCollectionView.dataSource = self
        self.favouritesCollectionView.delegate = self
        self.favouritesCollectionView.register(FavouritesCollectionViewCell.self, forCellWithReuseIdentifier: "FavouriteCell")
        self.favouritesCollectionView.contentInset = UIEdgeInsets(top: 5, left: 5, bottom: 5, right: 5)
        self.favouritesCollectionView.backgroundColor = .white
        self.view.addSubview(favouritesCollectionView)
    }
    
    func stopCurrentTasks() {
        for task in 0...downloadTasks.count {
            self.downloadTasks[task]?.pause()
        }
    }
}

extension FavouritesViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return viewModels.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "FavouriteCell", for: indexPath) as! FavouritesCollectionViewCell
        guard let image = downloadTasks[indexPath.row]?.image else {
            cell.showLoading()
            return cell
        }
        cell.hideLoading()
        cell.set(image: image)
        return cell
    }
    
    
}

extension FavouritesViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        setupDownloadTask(index: indexPath.row)
        downloadTasks[indexPath.row]?.resume()
    }
    
    func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        downloadTasks[indexPath.row]?.pause()
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let presenter = DetailedPresenter()
        let detailedViewController = DetailedViewController(presenter: presenter, segueFrom: .favourites)
        let detailedView = DetailedViewModel(id: String(viewModels[indexPath.row].id), url: viewModels[indexPath.row].imageUrl, subId: viewModels[indexPath.row].subId)
        detailedViewController.set(viewModel: detailedView)
        navigationController?.pushViewController(detailedViewController, animated: true)
    }
}

extension FavouritesViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let ratio: CGFloat = 1.2
        let width = collectionView.frame.width/3 - collectionView.contentInset.left - collectionView.contentInset.right
        let height = width * ratio
        return CGSize(width: width, height: height)
    }
}

extension FavouritesViewController: ImageTaskDownloadedDelegate {
    func imageDownloaded(position: Int) {
        self.favouritesCollectionView.reloadItems(at: [IndexPath(row: position, section: 0)])
    }
}
