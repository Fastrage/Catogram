//
//  UploadPresenter.swift
//  Catogram
//
//  Created Олег Крылов on 18/08/2019.
//  Copyright © 2019 OlegKrylov. All rights reserved.
//
//  Template generated by Edward
//

import Foundation

// MARK: View -
protocol UploadViewProtocol: AnyObject {
    func set(viewModels: [UploadedViewModel])
    func showAlert(for alert: String)
}

// MARK: Presenter -
protocol UploadPresenterProtocol: AnyObject {
    var view: UploadViewProtocol? { get set }
    func viewDidLoad()
    func uploadImage(image: Data)
}

final class UploadPresenter: UploadPresenterProtocol {
    
    weak var view: UploadViewProtocol?
    
    private var uploadedImages: [UploadedResponse] = []
    private let imageNetworkProtocol = NetworkService(urlFactory: URLFactory())
    
    func viewDidLoad() {
        getUploadedImages()
    }
    
    func uploadImage(image: Data) {
        self.imageNetworkProtocol.uploadImage(image: image) { result in
            switch result {
            case .success(let response):
                if response.message != nil {
                    self.view?.showAlert(for: response.message ?? "Error")
                } else {
                    self.viewDidLoad()
                }
            case .failure(let error):
                print(error)
            }
        }
    }
}

private extension UploadPresenter {
    func getUploadedImages() {
        self.imageNetworkProtocol.getUploadedImages { result in
            switch result {
            case .success(let response):
                self.didLoad(response)
            case .failure(let error):
                print(error)
            }
        }
    }
    
    func makeViewModels(_ images: [UploadedResponse]) -> [UploadedViewModel] {
        return images.map { image in
            UploadedViewModel(createdAt: image.createdAt ?? "",
                              id: image.id ?? "",
                              subId: image.subId ?? "",
                              url: image.url ?? "")
        }
    }
    
    func didLoad(_ images: [UploadedResponse]) {
        self.uploadedImages = images
        let viewModels: [UploadedViewModel] = self.makeViewModels(self.uploadedImages)
        self.view?.set(viewModels: viewModels)
    }
}
