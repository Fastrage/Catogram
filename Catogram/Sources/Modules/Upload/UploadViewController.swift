//
//  UploadViewController.swift
//  Catogram
//
//  Created Олег Крылов on 18/08/2019.
//  Copyright © 2019 OlegKrylov. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

final class UploadViewController: UIViewController, UploadViewProtocol {
    
    private var presenter: UploadPresenterProtocol
    private let uploadCollectionView: UICollectionView
    private var viewModels = [UploadedViewModel]()
    private var downloadTasks = [Int: ImageTask]()
    
    init(presenter: UploadPresenterProtocol) {
        let collectionViewLayout = UICollectionViewFlowLayout()
        self.uploadCollectionView = UICollectionView(frame: .zero, collectionViewLayout: collectionViewLayout)
        self.presenter = presenter
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        setupUploadCollectionView()
        presenter.view = self
        presenter.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        presenter.viewDidLoad()
        self.navigationController?.navigationBar.prefersLargeTitles = true
        self.tabBarController?.tabBar.isHidden = false
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        self.uploadCollectionView.frame = self.view.bounds
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        stopCurrentTasks()
    }
}

extension UploadViewController {
    func showAlert(for alert: String) {
        let alertController = UIAlertController(title: nil, message: alert, preferredStyle: .alert)
        let alertAction = UIAlertAction(title: "Ok", style: .default, handler: nil)
        alertController.addAction(alertAction)
        present(alertController, animated: true, completion: nil)
    }
    
    func set(viewModels: [UploadedViewModel]) {
        self.viewModels = viewModels
        self.uploadCollectionView.reloadData()
    }
}

private extension UploadViewController {
    func setupDownloadTask(index: Int) {
        let session = URLSession(configuration: URLSessionConfiguration.default)
        guard let url = URL(string: self.viewModels[index].url) else { return }
        if downloadTasks[index] == nil || downloadTasks[index]?.url != url || self.viewModels[index].image == nil {
            let imageTask = ImageTask(position: index, url: url, session: session, delegate: self)
            downloadTasks[index] = imageTask
        }
    }
    
    func stopCurrentTasks() {
        for task in downloadTasks {
            task.value.pause()
        }
        self.downloadTasks.removeAll()
    }
    
    func setupUploadCollectionView() {
        self.view.backgroundColor = .white
        self.uploadCollectionView.dataSource = self
        self.uploadCollectionView.delegate = self
        self.uploadCollectionView.register(UploadCollectionViewCell.self, forCellWithReuseIdentifier: "UploadCell")
        self.uploadCollectionView.contentInset = UIEdgeInsets(top: 5, left: 5, bottom: 5, right: 5)
        self.uploadCollectionView.backgroundColor = .white
        self.view.addSubview(uploadCollectionView)
    }
    
    func setupView() {
        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(uploadNewImageAllertContoller))
    }
    
    @objc func uploadNewImageAllertContoller() {
        let alertController = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
        
        alertController.addAction(UIAlertAction(title: "Выбрать из галереи", style: UIAlertAction.Style.default, handler: { (UIAlertAction) in
            self.openGallery()
        }))
        alertController.addAction(UIAlertAction(title: "Сделать фото", style: UIAlertAction.Style.default, handler: { (UIAlertAction) in
            self.openCamera()
        }))
        alertController.addAction(UIAlertAction(title: "Cancle", style: UIAlertAction.Style.cancel, handler: nil))
        present(alertController, animated: true)
    }
    
    func openGallery() {
        let imagePickerController = UIImagePickerController()
        imagePickerController.delegate = self
        imagePickerController.sourceType = UIImagePickerController.SourceType.savedPhotosAlbum
        imagePickerController.allowsEditing = false
        self.present(imagePickerController, animated: true, completion: nil)
    }
    
    func openCamera() {
        if(UIImagePickerController .isSourceTypeAvailable(UIImagePickerController.SourceType.camera))
        {
            let imagePickerController = UIImagePickerController()
            imagePickerController.delegate = self
            imagePickerController.sourceType = UIImagePickerController.SourceType.camera
            imagePickerController.allowsEditing = false
            self.present(imagePickerController, animated: true, completion: nil)
        } else {
            let alert  = UIAlertController(title: "Warning", message: "You don't have camera", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            self.present(alert, animated: true, completion: nil)
        }
    }
}

extension UploadViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        setupDownloadTask(index: indexPath.row)
        downloadTasks[indexPath.row]?.resume()
    }
    
    func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        downloadTasks[indexPath.row]?.pause()
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let presenter = DetailedPresenter()
        let detailedViewController = DetailedViewController(presenter: presenter, segueFrom: .upload)
        let detailedView = DetailedViewModel(id: viewModels[indexPath.row].id, url: viewModels[indexPath.row].url, subId: viewModels[indexPath.row].subId)
        detailedViewController.set(viewModel: detailedView)
        navigationController?.pushViewController(detailedViewController, animated: true)
    }
}

extension UploadViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.viewModels.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "UploadCell", for: indexPath) as! UploadCollectionViewCell
        guard let image = self.viewModels[indexPath.row].image else {
            cell.showLoading()
            return cell
        }
        cell.hideLoading()
        cell.set(image: image)
        return cell
    }
}

extension UploadViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let ratio: CGFloat = 1.2
        let width = collectionView.frame.width/3 - collectionView.contentInset.left - collectionView.contentInset.right
        let height = width * ratio
        return CGSize(width: width, height: height)
    }
}

extension UploadViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        let image = info[UIImagePickerController.InfoKey.originalImage] as? UIImage
        guard let imageData = image?.jpegData(compressionQuality: 0.7) else { return }
        presenter.uploadImage(image: imageData)
        picker.dismiss(animated: true, completion: nil)
    }
}

extension UploadViewController: ImageTaskDownloadedDelegate {
    func imageDownloaded(position: Int, image: UIImage) {
        self.viewModels[position].image = image
        self.uploadCollectionView.reloadItems(at: [IndexPath(row: position, section: 0)])
    }
}

