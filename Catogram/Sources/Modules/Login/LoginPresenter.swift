//
//  LoginPresenter.swift
//  Catogram
//
//  Created Олег Крылов on 07/08/2019.
//  Copyright © 2019 OlegKrylov. All rights reserved.
//
//  Template generated by Edward
//

import Foundation
// MARK: View -
protocol LoginViewProtocol: AnyObject {
    func setupLoginView(login: String?)
    func showAlert(for: String)
    func performSegueToTabbar()
}

// MARK: Presenter -
protocol LoginPresenterProtocol: AnyObject {
	var view: LoginViewProtocol? { get set }
    func viewDidLoad()
    func validate(login: String, password: String) -> Bool
    func preformLogin(login: String, password: String)
    func performLogout()
    func setUserIdForCurrentSession(login: String) 
}

class LoginPresenter: LoginPresenterProtocol {

    weak var view: LoginViewProtocol?

    func viewDidLoad() {
        let lastTimeLoginUser = UserDefaults.standard.string(forKey: "lasTimeLoginUser")
        if lastTimeLoginUser == nil {
            self.view?.setupLoginView(login: nil)
        } else {
            self.view?.setupLoginView(login: lastTimeLoginUser)
        }
    }
}
extension LoginPresenter {
    
    func validate(login: String, password: String) -> Bool {
        do {
            try login.validatedText(validationType: ValidatorType.email)
            try password.validatedText(validationType: ValidatorType.password(login: login))
            return true
        } catch (let error) {
            view?.showAlert(for: (error as! ValidationError).message)
            return false
        }
    }
    
    func preformLogin(login: String, password: String) {
        guard validate(login: login, password: password) else {
                return
            }
            if UserDefaults.standard.array(forKey: "\(login)") == nil {
                UserDefaults.standard.set([login, password, UUID().uuidString], forKey: "\(login)") }
            setUserIdForCurrentSession(login: login)
            UserDefaults.standard.set(login, forKey: "lasTimeLoginUser")
            view?.performSegueToTabbar()
    }
    
    func performLogout() {
        UserDefaults.standard.removeObject(forKey: "lasTimeLoginUser")
        view?.performSegueToTabbar()
    }
    
    func setUserIdForCurrentSession(login: String) {
        let user = UserDefaults.standard.stringArray(forKey: login)
        guard let userId = user?[2]  else {
            return
        }
        Constants.currentUserUUID = userId 
    }
}

