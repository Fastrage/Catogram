//
//  FavouritesViewController.swift
//  Catogram
//
//  Created Олег Крылов on 12/08/2019.
//  Copyright © 2019 OlegKrylov. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

final class FavouritesViewController: UIViewController, FavouritesViewProtocol {
    
    var presenter: FavouritesPresenterProtocol
    private let collectionView: UICollectionView
    private var viewModels = [FavouritesViewModel]()
    
	init(presenter: FavouritesPresenterProtocol) {
        self.presenter = presenter
        let collectionViewLayout = UICollectionViewFlowLayout()
        self.collectionView = UICollectionView(frame: .zero, collectionViewLayout: collectionViewLayout)
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        presenter.view = self
        presenter.viewDidLoad()
    }
    override func viewWillAppear(_ animated: Bool) {
        presenter.getFavouritesImages()
    }

    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        setupCollectionView()
        self.collectionView.frame = self.view.bounds
    }
}

extension FavouritesViewController {
    func setupCollectionView() {
        self.collectionView.dataSource = self
        self.collectionView.delegate = self
        self.collectionView.register(FavouritesCollectionViewCell.self, forCellWithReuseIdentifier: "FavouriteCell")
        self.collectionView.contentInset = UIEdgeInsets(top: 5, left: 5, bottom: 5, right: 5)
        self.collectionView.backgroundColor = .white
        self.view.addSubview(collectionView)
    }
    
    func set(viewModels: [FavouritesViewModel]) {
        self.viewModels = viewModels
        self.collectionView.reloadData()
    }
}

extension FavouritesViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return viewModels.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
            let viewModel = self.viewModels[indexPath.item]
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "FavouriteCell", for: indexPath) as! FavouritesCollectionViewCell
            cell.update(with: viewModel)
            return cell
        }
}

extension FavouritesViewController: UICollectionViewDelegate {
    
}

extension FavouritesViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let ratio: CGFloat = 1.2
        let width = collectionView.frame.width/3 - collectionView.contentInset.left - collectionView.contentInset.right
        let height = width * ratio
        return CGSize(width: width, height: height)
    }
}
