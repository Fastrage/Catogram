//
//  FeedViewController.swift
//  Catogram
//
//  Created Олег Крылов on 07/08/2019.
//  Copyright © 2019 OlegKrylov. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

final class FeedViewController: UIViewController, FeedViewProtocol {
    
    private let presenter: FeedPresenterProtocol
    private let wallpaperImageView = UIImageView()
    private let stackView = UIStackView()
    private let voteUpButton = CustomButton()
    private let voteDownButton = CustomButton()
    private let favItButton = CustomButton()
    private let activityIndicator = UIActivityIndicatorView()
    private var viewModel: FeedViewModel? = nil
    private var downloadTasks = [Int: ImageTask]()
    
    init(presenter: FeedPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupFeedView()
        presenter.view = self
        presenter.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.navigationBar.prefersLargeTitles = true
        self.tabBarController?.tabBar.isHidden = false
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        stopCurrentTasks()
    }
    override func viewDidLayoutSubviews() {
        setupFrames()
    }
}

extension FeedViewController {
    func set(viewModel: FeedViewModel) {
        self.startActivityIndicator()
        self.downloadTasks.removeAll()
        self.viewModel = viewModel
        self.setupDownloadTask(index: 0)
        self.downloadTasks[0]?.resume()
    }
}

private extension FeedViewController {
    func setupDownloadTask(index: Int) {
        let session = URLSession(configuration: URLSessionConfiguration.default)
        if self.downloadTasks[index] == nil {
            guard let viewModel = self.viewModel else { return }
            guard let url = URL(string: viewModel.url) else { return }
            let imageTask = ImageTask(position: index, url: url, session: session, delegate: self)
            self.downloadTasks[index] = imageTask
        }
    }
    
    func stopCurrentTasks() {
        for task in 0...downloadTasks.count {
            self.downloadTasks[task]?.pause()
        }
    }
    
    func startActivityIndicator() {
        self.activityIndicator.startAnimating()
    }
    
    func stopActivityIndicator() {
        self.activityIndicator.stopAnimating()
    }
    
    func setupFeedView() {
        self.view.addSubview(wallpaperImageView)
        self.view.addSubview(stackView)
        self.stackView.addSubview(voteUpButton)
        self.stackView.addSubview(voteDownButton)
        self.stackView.addSubview(favItButton)
        self.view.addSubview(activityIndicator)
        
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(tapHandler(sender:)))
        
        self.view.backgroundColor = .white
        
        self.wallpaperImageView.addGestureRecognizer(tapGestureRecognizer)
        self.wallpaperImageView.isUserInteractionEnabled = true
        self.wallpaperImageView.layer.cornerRadius = 10
        self.wallpaperImageView.contentMode = .scaleAspectFill
        self.wallpaperImageView.clipsToBounds = true
        
        
        self.activityIndicator.hidesWhenStopped = true
        self.activityIndicator.color = .gray
        
        
        self.stackView.backgroundColor = UIColor.white
        
        
        self.voteUpButton.addTarget(self, action: #selector(voteUpForCurrentImage)
            , for: .touchDown)
        self.voteUpButton.backgroundColor = .white
        self.voteUpButton.setImage(AppImages.like, for: .normal)
        self.voteUpButton.imageView?.contentMode = .scaleAspectFit
        
        
        self.voteDownButton.addTarget(self, action: #selector(voteDownForCurrentImage), for: .touchDown)
        self.voteDownButton.backgroundColor = .white
        self.voteDownButton.setImage(AppImages.dislike, for: .normal)
        self.voteDownButton.imageView?.contentMode = .scaleAspectFit
        
        
        self.favItButton.addTarget(self, action: #selector(favCurrentImage), for: .touchDown)
        self.favItButton.backgroundColor = .white
        self.favItButton.setImage(AppImages.star, for: .normal)
        self.favItButton.imageView?.contentMode = .scaleAspectFit
    }
    
    func setupFrames() {
        self.wallpaperImageView.frame.size = self.view.bounds.size
        
        self.stackView.frame = CGRect(x: 0,
                                      y: self.view.bounds.maxY-60-self.view.safeAreaInsets.bottom,
                                      width: self.view.bounds.width,
                                      height: 60)
        
        self.voteUpButton.frame = CGRect(x: self.stackView.bounds.origin.x,
                                         y: self.stackView.bounds.origin.y,
                                         width: self.stackView.bounds.size.width/3,
                                         height: 60)
        
        self.voteDownButton.frame = CGRect(x: self.stackView.bounds.origin.x + (self.stackView.bounds.size.width/3)*2,
                                           y: self.stackView.bounds.origin.y,
                                           width: self.stackView.bounds.size.width/3,
                                           height: 60)
        
        self.favItButton.frame = CGRect(x: self.stackView.bounds.origin.x + self.stackView.bounds.size.width/3,
                                        y: self.stackView.bounds.origin.y,
                                        width: self.stackView.bounds.size.width/3,
                                        height: 60)
        
        self.wallpaperImageView.frame.size.height = self.view.bounds.size.height-self.stackView.bounds.height-83
        
        self.activityIndicator.frame.origin = CGPoint(x: self.wallpaperImageView.bounds.midX,
                                                      y: self.wallpaperImageView.bounds.midY)
    }
    
    @objc func voteUpForCurrentImage() {
        presenter.voteUpForCurrentImage()
    }
    
    @objc func voteDownForCurrentImage() {
        presenter.voteUpForCurrentImage()
    }
    
    @objc func favCurrentImage() {
        presenter.favCurrentImage()
    }
    
    @objc func tapHandler(sender: UITapGestureRecognizer) {
        if sender.state == .ended && viewModel != nil {
            let presenter = DetailedPresenter()
            let detailedViewController = DetailedViewController(presenter: presenter, segueFrom: .feed)
            guard let id = viewModel?.id else { return }
            guard let url = viewModel?.url else { return }
            let detailedView = DetailedViewModel(id: id, url: url, subId: nil)
            detailedViewController.set(viewModel: detailedView)
            navigationController?.pushViewController(detailedViewController, animated: true)
        }
    }
}

extension FeedViewController: ImageTaskDownloadedDelegate {
    func imageDownloaded(position: Int, image: UIImage) {
        self.wallpaperImageView.image = image
        self.stopActivityIndicator()
    }
}
