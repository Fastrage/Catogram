//
//  DetailedViewController.swift
//  Catogram
//
//  Created Олег Крылов on 21/08/2019.
//  Copyright © 2019 OlegKrylov. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

final class DetailedViewController: UIViewController, DetailedViewProtocol {
    
    
    
    private var presenter: DetailedPresenterProtocol
    private let activityIndicator = UIActivityIndicatorView()
    private let detailedImageView = UIImageView()
    private let optionalButton = CustomButton()
    private let segueFrom: SenderVC
    private var viewModel: DetailedViewModel? = nil
    private var downloadTasks = [Int: ImageTask]()
    
    init(presenter: DetailedPresenterProtocol, segueFrom: SenderVC) {
        self.presenter = presenter
        self.segueFrom = segueFrom
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        setupAdditionSubviews(segueFrom: self.segueFrom)
        presenter.view = self
        presenter.viewDidLoad()
    }
    
    
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        if (self.isMovingFromParent) {
            UIDevice.current.setValue(Int(UIInterfaceOrientation.portrait.rawValue), forKey: "orientation")
        }
    }
}

extension DetailedViewController {
    func set(viewModel: DetailedViewModel) {
        self.startActivityIndicator()
        self.downloadTasks.removeAll()
        self.viewModel = viewModel
        self.setupDownloadTask(index: 0)
        self.downloadTasks[0]?.resume()
    }
    
    func goBack() {
        _ = navigationController?.popViewController(animated: true)
    }
}

private extension DetailedViewController {
    
    func setupView() {
        self.view.addSubview(detailedImageView)
        self.view.addSubview(activityIndicator)
        self.view.addSubview(optionalButton)
        self.navigationItem.rightBarButtonItem = UIBarButtonItem(title: "Share", style: .plain, target: self, action: #selector(share(sender:)))
        
        self.view.backgroundColor = .black
        
        self.detailedImageView.translatesAutoresizingMaskIntoConstraints = false
        self.detailedImageView.topAnchor.constraint(equalTo: self.view.topAnchor).isActive = true
        self.detailedImageView.bottomAnchor.constraint(equalTo: self.view.bottomAnchor).isActive = true
        self.detailedImageView.leftAnchor.constraint(equalTo: self.view.leftAnchor).isActive = true
        self.detailedImageView.rightAnchor.constraint(equalTo: self.view.rightAnchor).isActive = true
        self.detailedImageView.widthAnchor.constraint(equalTo: self.view.widthAnchor).isActive = true
        self.detailedImageView.heightAnchor.constraint(equalTo: self.view.heightAnchor).isActive = true
        
        self.detailedImageView.contentMode = .scaleAspectFit
        self.detailedImageView.isUserInteractionEnabled = true
        let pinchMethod = UIPinchGestureRecognizer(target: self, action: #selector(pinchImage))
        self.detailedImageView.addGestureRecognizer(pinchMethod)
        
        self.activityIndicator.translatesAutoresizingMaskIntoConstraints = false
        self.activityIndicator.centerXAnchor.constraint(equalTo: self.view.centerXAnchor).isActive = true
        self.activityIndicator.centerYAnchor.constraint(equalTo: self.view.centerYAnchor).isActive = true
        
        self.optionalButton.translatesAutoresizingMaskIntoConstraints = false
        self.optionalButton.leftAnchor.constraint(equalTo: self.view.leftAnchor).isActive = true
        self.optionalButton.rightAnchor.constraint(equalTo: self.view.rightAnchor).isActive = true
        self.optionalButton.bottomAnchor.constraint(equalTo: self.view.bottomAnchor).isActive = true
        self.optionalButton.heightAnchor.constraint(equalToConstant: 60).isActive = true
        self.optionalButton.setImage(AppImages.trash?.withRenderingMode(.alwaysTemplate), for: .normal)
        self.optionalButton.backgroundColor = .clear
        self.optionalButton.tintColor = UIColor.mainColor()
        self.optionalButton.isHidden = true
        
        self.navigationController?.navigationBar.prefersLargeTitles = false
        self.tabBarController?.tabBar.isHidden = true
    }
    
    
    @objc func pinchImage(sender: UIPinchGestureRecognizer) {
        guard sender.view != nil else { return }
        
        if let scale = (sender.view?.transform.scaledBy(x: sender.scale, y: sender.scale)) {
            guard scale.a > 1.0 else { return }
            guard scale.d > 1.0 else { return }
            sender.view?.transform = scale
            sender.scale = 1.0
        }
    }
    
    @objc func share(sender: UIView) {
        guard let image = self.detailedImageView.image else { return }

        let activityViewController = UIActivityViewController(activityItems: [image], applicationActivities: nil)
        activityViewController.excludedActivityTypes = [UIActivity.ActivityType.airDrop, UIActivity.ActivityType.addToReadingList, UIActivity.ActivityType.assignToContact, UIActivity.ActivityType.mail, UIActivity.ActivityType.openInIBooks, UIActivity.ActivityType.print]
        activityViewController.popoverPresentationController?.sourceView = sender
        self.present(activityViewController, animated: true, completion: nil)
    }
    
    @objc func canRotate() -> Void {}
    
    @objc func userTapRemoveFromFavoutires() {
        guard let id = self.viewModel?.id else { return }
        presenter.userTapRemoveFromFavoutires(id: id)
        startActivityIndicator()
    }
    
    @objc func userTapRemoveFromUploaded() {
        guard let id = self.viewModel?.id else { return }
        presenter.userTapRemoveFromUploaded(id: id)
        startActivityIndicator()
    }
    
    func setupDownloadTask(index: Int) {
        let session = URLSession(configuration: URLSessionConfiguration.default)
        if self.downloadTasks[index] == nil {
            guard let viewModel = self.viewModel else { return }
            guard let url = URL(string: viewModel.url) else { return }
            let imageTask = ImageTask(position: index, url: url, session: session, delegate: self)
            self.downloadTasks[index] = imageTask
        }
    }
    
    func startActivityIndicator() {
        self.activityIndicator.startAnimating()
    }
    
    func stopActivityIndicatror() {
        self.activityIndicator.stopAnimating()
    }
    
    
    func setupAdditionSubviews(segueFrom: SenderVC) {
        switch segueFrom {
        case .feed:
            return
        case .breeds:
            return
        case .search:
            return
        case .favourites:
            self.optionalButton.addTarget(self, action: #selector(userTapRemoveFromFavoutires), for: .touchDown)
            self.optionalButton.isHidden = false
            return
        case .upload:
            self.optionalButton.addTarget(self, action: #selector(userTapRemoveFromUploaded), for: .touchDown)
            self.optionalButton.isHidden = false
            return
        }
    }
}

extension DetailedViewController: ImageTaskDownloadedDelegate {
    func imageDownloaded(position: Int, image: UIImage) {
        self.detailedImageView.image = image
        self.stopActivityIndicatror()
    }
    
}

enum SenderVC {
    case feed, breeds, search, favourites, upload
}
